# -*- coding: utf-8 -*-
"""AudioeVoz.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gpYHvnSuNmRRPcv8WB5e_f2701nC3e5s

Algoritmos de Reconhimento de Voz
"""

# Instalando as Bibliotecas
!pip install SpeechRecognition
!pip install ffmpeg-python
!apt install libasound2-dev portaudio19-dev libportaudio2 libportaudiocpp0 ffmpeg

# Usando JavaScript com Python para obter áudio via Google Colab
from io import BytesIO
from base64 import b64decode
from google.colab import output
from IPython.display import Javascript
GRAVAR = """
const sleep  = time => new Promise(resolve => setTimeout(resolve, time))
const b2text = blob => new Promise(resolve => {
  const reader = new FileReader()
  reader.onloadend = e => resolve(e.srcElement.result)
  reader.readAsDataURL(blob)
})
var record = time => new Promise(async resolve => {
  stream = await navigator.mediaDevices.getUserMedia({ audio: true })
  recorder = new MediaRecorder(stream)
  chunks = []
  recorder.ondataavailable = e => chunks.push(e.data)
  recorder.start()
  await sleep(time)
  recorder.onstop = async ()=>{
    blob = new Blob(chunks)
    text = await b2text(blob)
    resolve(text)
  }
  recorder.stop()
})
"""
def record(sec=3):
  print("Fale uma frase...")
  display(Javascript(GRAVAR))
  sec += 1
  s = output.eval_js('record(%d)' % (sec*1000))
  print("Gravação Concluída !")
  b = b64decode(s.split(',')[1])
  return b 

# Gravando áudio
audio = record(5)

# Salvar o arquivo de audio em bytes em um arquivo de audio no formato wav
with open('arquivoNovo.wav', mode='bx') as f:
    f.write(audio)

# Ajustar o arquivo wav gerado - Está corrompido
import librosa
import soundfile as sf
import wave
x,_ = librosa.load('arquivoNovo.wav', sr=16000)
sf.write('tmp.wav', x, 16000)
with wave.open('tmp.wav') as file:
    print('Arquivo aberto!')

# Converter o audio wav para audio file
import speech_recognition as sr
import IPython.display as ipd
audioW = sr.AudioFile('tmp.wav')
# Mostrar o áudio
ipd.display(ipd.Audio('tmp.wav'))

# Converter audio file para audio data
microfone = sr.Recognizer()
with audioW as source:
  data_audio = microfone.record(source)

frase = microfone.recognize_google(audio_data=data_audio, language='pt-BR')
print("Você disse: " + frase)

def processar_texto(texto):
    tokens = texto.split()
    try:
        num1 = float(tokens[0])
        oper = tokens[1]
        num2 = float(tokens[2])
        if(oper=='+'):
            result = num1+num2
            print(f'Resultado: {result}')
        elif(oper=='-'):
            result = num1 - num2
            print(f'Resultado: {result}')
        else:
            print('Estão disponíveis apenas as operações de Soma e Subtração')
    except ValueError:
        print('Entrada inválida')

import os 
if __name__ == '__main__':
  processar_texto(frase)
  os.remove('arquivoNovo.wav')
  os.remove('tmp.wav')